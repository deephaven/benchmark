package io.deephaven.benchmark.tests.standard.parquet;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

/**
 * Standard tests for writing/reading multi-column data with different codec/compression. To save time, the parquet
 * generated by the "write" tests is used by the "read" tests
 */
@TestMethodOrder(OrderAnnotation.class)
public class ParquetCodecTest {
    final ParquetTestRunner runner = new ParquetTestRunner(this);
    final String[] usedColumns = {"str10K", "long10K", "int10K", "short10K", "bigDec10K", "array5", "vector5"};

    @BeforeEach
    public void setup() {
        runner.setScaleFactors(5, 1);
    }

    @Test
    @Order(1)
    public void writeMultiColSnappy() {
        runner.runWriteTest("ParquetWrite- Snappy Multi Col -Static", "SNAPPY", usedColumns);
    }

    @Test
    @Order(2)
    public void readMultiColSnappy() {
        runner.runReadTest("ParquetRead- Snappy Multi Col -Static");
    }

    @Test
    @Order(3)
    public void writeMultiColZstd() {
        runner.runWriteTest("ParquetWrite- Zstd Multi Col -Static", "ZSTD", usedColumns);
    }

    @Test
    @Order(4)
    public void readMultiColZstd() {
        runner.runReadTest("ParquetRead- Zstd Multi Col -Static");
    }

    @Test
    @Order(5)
    public void writeMultiColLzo() {
        runner.runWriteTest("ParquetWrite- Lzo Multi Col -Static", "LZO", usedColumns);
    }

    @Test
    @Order(6)
    public void readMultiColLzo() {
        runner.runReadTest("ParquetRead- Lzo Multi Col -Static");
    }

    @Test
    @Order(7)
    public void writeMultiColLz4Raw() {
        runner.runWriteTest("ParquetWrite- Lz4Raw Multi Col -Static", "LZ4_RAW", usedColumns);
    }

    @Test
    @Order(8)
    public void readMultiColLz4Raw() {
        runner.runReadTest("ParquetRead- Lz4Raw Multi Col -Static");
    }

    @Test
    @Order(9)
    public void writeMultiColGzip() {
        runner.runWriteTest("ParquetWrite- Gzip Multi Col -Static", "GZIP", usedColumns);
    }

    @Test
    @Order(10)
    public void readMultiColGzip() {
        runner.runReadTest("ParquetRead- Gzip Multi Col -Static");
    }

    @Test
    @Order(11)
    public void writeMultiColNone() {
        runner.runWriteTest("ParquetWrite- No Codec Multi Col -Static", "NONE", usedColumns);
    }

    @Test
    @Order(12)
    public void readMultiColNone() {
        runner.runReadTest("ParquetRead- No Codec Multi Col -Static");
    }

}
